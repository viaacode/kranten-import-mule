<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
<!-- 
	<flow name="setup-related-info" initialState="started" processingStrategy="synchronous">
		<json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<set-variable variableName="pid" value="#[payload['correlation_id'] == null ? payload['pid'] : payload['correlation_id'] ]" doc:name="keep pid"/>
		<set-variable variableName="data" value="#[payload]" doc:name="keep payload data"/>
		<scripting:component doc:name="Groovy">
			<scripting:script engine="Groovy"><![CDATA[import be.viaa.exceptions.StepFailedException;

boolean isError = (payload.status != null && ! "ok".equalsIgnoreCase (payload.status)) || (payload.status != null && ! payload.status);

if ( isError ) { throw new StepFailedException ('previous step was not successfull'); }]]></scripting:script>
		</scripting:component>
		<db:select config-ref="tracking-db" doc:name="Database">
            <db:parameterized-query><![CDATA[select data from ${database.tracktable} where pid = #[flowVars.pid];]]></db:parameterized-query>
		</db:select>
		<scripting:component doc:name="Groovy">
			<scripting:script engine="Groovy"><![CDATA[import be.viaa.exceptions.UnknownPidException;

if ( payload.size () < 1 ) { throw new UnknownPidException (flowVars.pid); }
return payload.get (0).get ('data');
]]></scripting:script>
		</scripting:component>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<set-variable variableName="request" value="#[payload]" doc:name="keep pid related data"/>
	</flow>
	-->
	<sub-flow name="setup-related-info">
				<json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<set-variable variableName="pid" value="#[payload['correlation_id'] == null ? payload['pid'] : payload['correlation_id'] ]" doc:name="keep pid"/>
		<set-variable variableName="data" value="#[payload]" doc:name="keep payload data"/>
		<scripting:component doc:name="Groovy">
			<scripting:script engine="Groovy"><![CDATA[import be.viaa.exceptions.StepFailedException;

boolean isError = (payload.status != null && ! "ok".equalsIgnoreCase (payload.status)) || (payload.status != null && ! payload.status);

if ( isError ) { throw new StepFailedException ('previous step was not successfull'); }]]></scripting:script>
		</scripting:component>
		<db:select config-ref="tracking-db" doc:name="Database">
            <db:parameterized-query><![CDATA[select data from ${database.tracktable} where pid = #[flowVars.pid];]]></db:parameterized-query>
		</db:select>
		<scripting:component doc:name="Groovy">
			<scripting:script engine="Groovy"><![CDATA[import be.viaa.exceptions.UnknownPidException;

if ( payload.size () < 1 ) { throw new UnknownPidException (flowVars.pid); }
return payload.get (0).get ('data');
]]></scripting:script>
		</scripting:component>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<set-variable variableName="request" value="#[payload]" doc:name="keep pid related data"/>
	</sub-flow>

	<sub-flow name="log">
		<dw:transform-message doc:name="Transform Message">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	pid: flowVars.pid,
	flow: flowVars.flow,
	directory: flowVars.request.directory,
	lvl: payload.lvl when payload.lvl != null otherwise 'info',
	msg: flowVars.exception.cause.message when flowVars.exception.cause != null otherwise flowVars.exception.message,
	(data: payload.data) when payload.data != null,
	timestamp: now
}]]></dw:set-payload>
		</dw:transform-message>
		<object-to-string-transformer doc:name="Object to String"/>
		<logger message="LOG =&gt; #[payload]" level="INFO" doc:name="Logger"/>
		<json:object-to-json-transformer doc:name="Object to JSON"/>
		<http:request config-ref="elasticsearch" path="${elasticsearch.index}/json" method="POST" doc:name="HTTP"/>
		<byte-array-to-string-transformer doc:name="Byte Array to String"/>
	</sub-flow>

	<catch-exception-strategy name="reject-handler">
        <set-variable variableName="exception" value="#[exception]" doc:name="Variable"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.pid != null]">
                <choice doc:name="Is TIFF corrupt?">
                    <when expression="#[flowVars.data.details.contains(&quot;Cannot read TIFF header&quot;) || flowVars.data.details.contains(&quot;Not enough data at scanline&quot;) || flowVars.data.details.contains(&quot;Sanity check on directory count failed&quot;)]">
                        <db:update config-ref="tracking-db" doc:name="Database">
                            <db:parameterized-query><![CDATA[UPDATE tracktable SET status = 'corrupted' WHERE pid = #[flowVars.pid];]]></db:parameterized-query>
                        </db:update>
                    </when>
                    <otherwise>
                        <db:update config-ref="tracking-db" doc:name="Mark pid as failed">
                            <db:parameterized-query><![CDATA[UPDATE tracktable SET status = 'failed' WHERE pid = #[flowVars.pid];]]></db:parameterized-query>
                        </db:update>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <expression-component doc:name="Do nothing"><![CDATA[// Do nothing]]></expression-component>
            </otherwise>
        </choice>
		<dw:transform-message doc:name="Transform Message">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	msg: flowVars.exception.cause.message when flowVars.exception.cause != null otherwise flowVars.exception.message,
	lvl: 'error',
	(data: flowVars.data) when flowVars.data != null
}]]></dw:set-payload>
		</dw:transform-message>
		<flow-ref name="log" doc:name="log"/>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
	</catch-exception-strategy>

</mule>
