<?xml version="1.0" encoding="UTF-8"?>
<mule
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp"
	xmlns:amqps="http://www.mulesoft.org/schema/mule/amqps"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
		http://www.mulesoft.org/schema/mule/amqps http://www.mulesoft.org/schema/mule/amqps/current/mule-amqps.xsd
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
		http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
		http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
		http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
	">

	<flow name="start-complex-generation">
		<amqp:inbound-endpoint queueName="${broker.queues.trigger}" responseTimeout="10000" doc:name="start-complex-generation" connector-ref="broker_connector"/>
		<logger message="starting for #[payload]" level="INFO" doc:name="Logger"/>
		<db:insert config-ref="tracking-db" doc:name="Database">
			<db:parameterized-query><![CDATA[insert into ${database.tracktable} (`pid`, `status`, `data`)
values (#[payload.pid], 'initialized', #[payload.data]);]]></db:parameterized-query>
		</db:insert>
		<amqp:outbound-endpoint responseTimeout="10000" exchange-pattern="request-response" doc:name="request directory listing" exchangeName="${broker.exchanges.list_directory}"/>
		<db:update config-ref="tracking-db" doc:name="Database">
			<db:parameterized-query><![CDATA[update ${database.tracktabe}
set `status` = 'requested-directory-listing'
where `pid` = #[payload.pid];]]></db:parameterized-query>
		</db:update>
	</flow>

	<flow name="restart-failed-generation">
		<amqp:inbound-endpoint queueName="${broker.queues.recover}" responseTimeout="10000" doc:name="restart-failed-generation"/>
		<flow-ref name="check-known-pid" doc:name="known pid"/>
		<db:update config-ref="tracking-db" doc:name="Database">
			<db:parameterized-query><![CDATA[update ${database.tracktable}
set `status` = 'restarting'
where `pid` = #[payload.pid];]]></db:parameterized-query>
		</db:update>
		<amqp:outbound-endpoint responseTimeout="10000" exchange-pattern="request-response" doc:name="request directory listing" exchangeName="${broker.exchanges.list_directory}"/>
		<db:update config-ref="tracking-db" doc:name="Database">
			<db:parameterized-query><![CDATA[update ${database.tracktabe}
set `status` = 'requested-directory-listing'
where `pid` = #[payload.pid];]]></db:parameterized-query>
		</db:update>
	</flow>

	<flow name="list-directories-completed">
		<amqp:inbound-endpoint queueName="${broker.queues.directorylist}" responseTimeout="10000" doc:name="list-directories-completed"/>
		<flow-ref name="check-known-pid" doc:name="known pid"/>
		<dw:transform-message doc:name="calculate renames">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
}]]></dw:set-payload>
		</dw:transform-message>
		<db:update config-ref="tracking-db" doc:name="update required processing info">
			<db:parameterized-query><![CDATA[update ${database.tracktable}
set nr_of_moves = #[payload.nr_of_moves],
`status` = 'queueing-structure'
where pid = #[payload.pid];]]></db:parameterized-query>
		</db:update>
		<scatter-gather doc:name="Scatter-Gather">
			<processor-chain>
				<dw:transform-message doc:name="Transform Message">
					<dw:set-payload resource="classpath:structures-extract-tifs.dwl"/>
				</dw:transform-message>
				<foreach doc:name="request tif moves">
					<amqp:outbound-endpoint responseTimeout="10000" exchange-pattern="request-response" doc:name="" exchangeName="${broker.exchanges.copy_file}"/>
				</foreach>
			</processor-chain>
			<processor-chain>
				<dw:transform-message doc:name="Transform Message">
					<dw:set-payload resource="classpath:structures-extract-altos.dwl"/>
				</dw:transform-message>
				<foreach doc:name="request alto moves">
					<amqp:outbound-endpoint responseTimeout="10000" exchange-pattern="request-response" doc:name="AMQP-0-9" exchangeName="${broker.exchanges.copy_file}"/>
				</foreach>
			</processor-chain>
			<processor-chain>
				<dw:transform-message doc:name="Transform Message">
					<dw:set-payload resource="classpath:structures-extract-oriignal.dwl"/>
				</dw:transform-message>
				<amqp:outbound-endpoint responseTimeout="10000" exchange-pattern="request-response" doc:name="ask original zip" exchangeName="${broker.exchanges.create_zip}"/>
			</processor-chain>
		</scatter-gather>
		<db:update config-ref="tracking-db" doc:name="Database">
			<db:parameterized-query><![CDATA[update ${database.tracktable}
set `status` = 'queued-structure'
where `pid` = #[payload.pid];]]></db:parameterized-query>
		</db:update>
	</flow>

	<flow name="file-move-completed">
		<amqp:inbound-endpoint queueName="${broker.queues.movecomplete}" responseTimeout="10000" doc:name="file-move-completed"/>
		<flow-ref name="check-known-pid" doc:name="known pid"/>
		<db:update config-ref="tracking-db" doc:name="increment move count">
			<db:parameterized-query><![CDATA[update ${database.tracktable}
set nr_of_moved = nr_of_moved + 1
where `pid` = #[payload.pid]]]></db:parameterized-query>
		</db:update>
		<db:select config-ref="tracking-db" doc:name="check completed">
			<db:parameterized-query><![CDATA[select nr_of_moves from ${database.tracktable} where `pid` = #[payload.pid];]]></db:parameterized-query>
		</db:select>
		<choice doc:name="is pid structure complete?">
			<when expression="#[payload.count == 0]">
				<amqp:outbound-endpoint responseTimeout="10000" exchange-pattern="request-response" doc:name="request mets generation" exchangeName="${broker.exchanges.generate_mets}"/>
				<db:update config-ref="tracking-db" doc:name="Database">
					<db:parameterized-query><![CDATA[update ${database.tracktable}
set `status` = 'requested-mets-generation'
where `pid` = #[paylaod.pid];]]></db:parameterized-query>
				</db:update>
			</when>
		</choice>
	</flow>

	<flow name="mets-generated">
		<amqp:inbound-endpoint queueName="${broker.queues.metscomplete}" responseTimeout="10000" doc:name="mets-generated"/>
		<flow-ref name="check-known-pid" doc:name="known pid"/>
		<amqp:outbound-endpoint responseTimeout="10000" exchange-pattern="request-response" doc:name="request embedding alto files" exchangeName="${broker.exchanges.embed_alto}"/>
		<db:update config-ref="tracking-db" doc:name="Database">
			<db:parameterized-query><![CDATA[update ${database.tracktable}
set `status` = 'requested-alto-embeding'
where `pid` = #[payload.pid];]]></db:parameterized-query>
		</db:update>
	</flow>

	<flow name="altos-embeded">
		<amqp:inbound-endpoint queueName="${broker.queues.altoscomplete}" responseTimeout="10000" doc:name="altos-embdede"/>
		<flow-ref name="check-known-pid" doc:name="known pid"/>
		<amqp:outbound-endpoint responseTimeout="10000" exchange-pattern="request-response" doc:name="request zipping into complex file" exchangeName="${broker.exchanges.create_zip}"/>
		<db:update config-ref="tracking-db" doc:name="Database">
			<db:parameterized-query><![CDATA[update ${database.tracktable}
set `status` = 'requested-complex-generation'
where `pid` = #[payload.pid];]]></db:parameterized-query>
		</db:update>
	</flow>

	<flow name="complex-generated">
		<amqp:inbound-endpoint queueName="${broker.queues.complexgenerated}" responseTimeout="10000" doc:name="complex-generated"/>
		<flow-ref name="check-known-pid" doc:name="known pid"/>
		<amqp:outbound-endpoint responseTimeout="10000" exchange-pattern="request-response" doc:name="request hand off to mam system" exchangeName="${broker.exchanges.hand_off}"/>
		<db:update config-ref="tracking-db" doc:name="Database">
			<db:parameterized-query><![CDATA[update ${database.tracktable}
set `status` = 'handing off'
where `pid` = #[payload.pid];]]></db:parameterized-query>
		</db:update>
	</flow>

	<flow name="check-known-pid">
		<db:select config-ref="tracking-db" doc:name="Database">
			<db:parameterized-query><![CDATA[select count(*) from ${database.tracktable} where `pid` = #[payload.pid];]]></db:parameterized-query>
		</db:select>
		<choice doc:name="Choice">
			<when expression="">
				<scripting:component doc:name="Groovy">
					<scripting:script engine="Groovy"><![CDATA[throw Exception ();]]></scripting:script>
				</scripting:component>
			</when>
		</choice>
	</flow>

</mule>
