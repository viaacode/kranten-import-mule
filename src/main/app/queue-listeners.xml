<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns="http://www.mulesoft.org/schema/mule/core" 
    xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" 
    xmlns:db="http://www.mulesoft.org/schema/mule/db" 
    xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
    xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
    xmlns:http="http://www.mulesoft.org/schema/mule/http" 
    xmlns:json="http://www.mulesoft.org/schema/mule/json" 
    xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" 
    xmlns:spring="http://www.springframework.org/schema/beans" 
    xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd">
    <http:request-config name="Sensor_API_Configuration" host="${sensor.host}" port="443" basePath="/api" doc:name="HTTP Request Configuration" connectionIdleTimeout="9999999" responseTimeout="9999999" protocol="HTTPS"></http:request-config>

    <flow name="start-complex-generation" initialState="started">
        <amqp:inbound-endpoint queueName="${broker.queues.trigger}" queueDurable="true" responseTimeout="10000" doc:name="start-complex-generation (kranten_initialize)" connector-ref="broker_connector" />
        <object-to-string-transformer doc:name="Object to String"/>
        <set-variable variableName="json" value="#[payload]" doc:name="keep json"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="pid" value="#[payload['pid']]" doc:name="set pid"/>
        <set-variable variableName="id" value="#[payload['id']]" doc:name="Set id"/>
        <set-variable variableName="request" value="#[payload]" doc:name="keep request"/>
        <db:select config-ref="tracking-db" doc:name="Get potentially existing row from database">
            <db:parameterized-query><![CDATA[SELECT * FROM tracktable WHERE gazet_fk = #[flowVars.id] or pid = #[flowVars.id];]]></db:parameterized-query>
        </db:select>
        <choice doc:name="Update existing or insert new?">
            <when expression="#[payload.size() &gt; 0]">
                <db:update config-ref="tracking-db" doc:name="Update existing">
                    <db:parameterized-query><![CDATA[UPDATE tracktable 
SET pid = #[flowVars.pid], status = 'initialized', data = #[flowVars.json], nr_of_moves = 0, nr_of_moved = 0
WHERE gazet_fk = #[flowVars.id];]]></db:parameterized-query>
                </db:update>
            </when>
            <otherwise>
                <db:insert config-ref="tracking-db" doc:name="Insert new">
                    <db:parameterized-query><![CDATA[insert into ${database.tracktable} (pid, status, data, gazet_fk)
values (#[flowVars.pid], 'initialized', #[flowVars.json], #[flowVars.id]);]]></db:parameterized-query>
                </db:insert>
            </otherwise>
        </choice>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload>
                <![CDATA[%dw 1.0
%output application/json
---
{
	'correlation_id': flowVars.pid,
	'pid': flowVars.pid,
	'directory': flowVars.request.directory ++ '/' ++ p('private_dir')
}]]>
            </dw:set-payload>
        </dw:transform-message>
        <amqp:outbound-endpoint exchangeName="${broker.exchanges.rm_private_dir}" responseTimeout="10000" doc:name="request removing private dir" connector-ref="broker_connector"  />
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        <db:update config-ref="tracking-db" doc:name="Set status to 'requested-initialize'">
            <db:parameterized-query>
                <![CDATA[update ${database.tracktable}
set status = 'requested-initialize'
where pid = #[flowVars.pid];]]>
            </db:parameterized-query>
        </db:update>
        <exception-strategy ref="reject-handler" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="restart-failed-generation" initialState="started">
        <amqp:inbound-endpoint queueName="${broker.queues.recover}" queueDurable="true" responseTimeout="10000" doc:name="restart-failed-generation" connector-ref="broker_connector" />
        <flow-ref name="setup-related-info" doc:name="setup-related-info"/>
        <db:update config-ref="tracking-db" doc:name="Database">
            <db:parameterized-query><![CDATA[update ${database.tracktable}
set status = 'restarting', nr_of_moves = 0, nr_of_moved = 0
where pid = #[flowVars.pid];]]></db:parameterized-query>
        </db:update>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload>
                <![CDATA[%dw 1.0
%output application/json
---
{
	'correlation_id': flowVars.pid,
	'pid': flowVars.pid,
	'directory': flowVars.request.directory ++ '/' ++ p('private_dir')
}]]>
            </dw:set-payload>
        </dw:transform-message>
        <amqp:outbound-endpoint exchangeName="${broker.exchanges.rm_private_dir}" responseTimeout="10000" doc:name="request removing private dir" connector-ref="broker_connector"/>
        <db:update config-ref="tracking-db" doc:name="Database">
            <db:parameterized-query>
                <![CDATA[update ${database.tracktable}
set status = 'restarting-generation'
where pid = #[flowVars.pid];]]>
            </db:parameterized-query>
        </db:update>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        <exception-strategy ref="reject-handler" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="queue-listenersFlow" initialState="started">
        <amqp:inbound-endpoint responseTimeout="10000" doc:name="continue-restart-after-cleared" connector-ref="broker_connector" queueName="${broker.queues.continuerecover}" />
        <flow-ref name="setup-related-info" doc:name="setup-related-info"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload>
                <![CDATA[%dw 1.0
%output application/json
---
{
	'correlation_id': flowVars.pid,
	'pid': flowVars.pid,
	'directory': flowVars.request.directory,
	'excludes': ['_complex', '.nfs', '_uncompressed.tif', 'Thumbs.db']
}]]>
            </dw:set-payload>
        </dw:transform-message>
        <amqp:outbound-endpoint responseTimeout="10000" doc:name="request directory listing" connector-ref="broker_connector" exchangeName="${broker.exchanges.list_directory}"/>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        <exception-strategy ref="reject-handler" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="list-directories-completed">
        <amqp:inbound-endpoint queueName="${broker.queues.directorylist}" responseTimeout="10000" doc:name="list-directories-completed (kranten_listing_complete)" connector-ref="broker_connector" />
        <flow-ref name="setup-related-info" doc:name="setup-related-info"/>
        <dw:transform-message doc:name="calculate renames">
            <dw:input-variable doc:sample="sample_data/json_2.json" variableName="data"/>
            <dw:input-variable doc:sample="sample_data/MyPojo_1.dwl" variableName="pid"/>
            <dw:input-variable doc:sample="sample_data/json_3.json" variableName="request"/>
            <dw:set-payload resource="classpath:calculate-renames.dwl"/>
        </dw:transform-message>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="split into operations">
            <dw:input-payload doc:sample="sample_data/list_string.dwl"/>
            <dw:set-variable resource="classpath:split-into-operations.dwl" variableName="data"/>
        </dw:transform-message>
        <logger message="data? #[flowVars.data]" level="INFO" doc:name="Logger"/>
        <db:update config-ref="tracking-db" doc:name="update required processing info">
            <db:parameterized-query><![CDATA[update ${database.tracktable}
set nr_of_moves = #[
   (flowVars.data['altos'].size () + flowVars.data['tifs'].size () + flowVars.data['jp2s'].size () + flowVars.data['jpgs'].size () + flowVars.data['pdfs'].size () + flowVars.data['mets'].size ()) > 0 ?
        (flowVars.data['altos'].size () + flowVars.data['tifs'].size () + flowVars.data['jp2s'].size () + flowVars.data['jpgs'].size () + flowVars.data['pdfs'].size () + flowVars.data['mets'].size () + (flowVars.request.createOriginalZip ? 1 : 0))
        : 0],
status = 'queueing-structure'
where pid = #[flowVars.pid];]]></db:parameterized-query>
        </db:update>
        <choice doc:name="Choice">
            <when expression="#[flowVars.data['altos'].size () + flowVars.data['tifs'].size () + flowVars.data['jp2s'].size () &gt; 0]">
                <scatter-gather doc:name="Scatter-Gather">
                    <processor-chain>
                        <dw:transform-message doc:name="Transform Message">
                            <dw:set-payload resource="classpath:structures-extract-tifs.dwl"/>
                        </dw:transform-message>
                        <foreach doc:name="request tif moves">
                            <json:object-to-json-transformer doc:name="Object to JSON"/>
                            <amqp:outbound-endpoint exchangeName="${broker.exchanges.copy_file}" responseTimeout="1000" connector-ref="broker_connector" doc:name="broker.exchanges.copy_file"/>
                        </foreach>
                    </processor-chain>
                    <processor-chain>
                        <dw:transform-message doc:name="Transform Message">
                            <dw:set-payload resource="classpath:structures-extract-altos.dwl"/>
                        </dw:transform-message>
                        <foreach doc:name="request alto moves">
                            <json:object-to-json-transformer doc:name="Object to JSON"/>
                            <amqp:outbound-endpoint exchangeName="${broker.exchanges.copy_file}" responseTimeout="1000" connector-ref="broker_connector" doc:name="broker.exchanges.copy_file"/>
                        </foreach>
                    </processor-chain>
                    <choice doc:name="Choice">
                        <when expression="#[flowVars.request.createOriginalZip]">
                            <dw:transform-message doc:name="Transform Message">
                                <dw:set-payload resource="classpath:structures-extract-oriignal.dwl"/>
                            </dw:transform-message>
                            <amqp:outbound-endpoint exchangeName="${broker.exchanges.create_zip}" responseTimeout="10000" connector-ref="broker_connector" doc:name="ask original zip"/>
                        </when>
                        <otherwise>
                            <logger message="Original zip doesn't have to be created" level="INFO" doc:name="Logger"/>
                        </otherwise>
                    </choice>
                    <processor-chain>
                        <dw:transform-message doc:name="Transform Message">
                            <dw:set-payload>
                                <![CDATA[%dw 1.0
%output application/java
---
flowVars.data.jp2s]]>
                            </dw:set-payload>
                        </dw:transform-message>
                        <foreach doc:name="request jp2 creation">
                            <json:object-to-json-transformer doc:name="Object to JSON"/>
                            <amqp:outbound-endpoint exchangeName="${broker.exchanges.create_jp2}" responseTimeout="10000" connector-ref="broker_connector" doc:name="broker.exchanges.copy_file"/>
                        </foreach>
                    </processor-chain>
                    <processor-chain>
                        <dw:transform-message doc:name="Transform Message">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
flowVars.data.pdfs]]></dw:set-payload>
                        </dw:transform-message>
                        <foreach doc:name="request pdf moves">
                            <json:object-to-json-transformer doc:name="Object to JSON"/>
                            <amqp:outbound-endpoint exchangeName="${broker.exchanges.copy_file}" responseTimeout="1000" connector-ref="broker_connector" doc:name="broker.exchanges.copy_file"/>
                        </foreach>
                    </processor-chain>
                    <processor-chain>
                        <dw:transform-message doc:name="Transform Message">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
flowVars.data.mets]]></dw:set-payload>
                        </dw:transform-message>
                        <foreach doc:name="request mets moves">
                            <json:object-to-json-transformer doc:name="Object to JSON"/>
                            <amqp:outbound-endpoint exchangeName="${broker.exchanges.copy_file}" responseTimeout="1000" connector-ref="broker_connector" doc:name="broker.exchanges.copy_file"/>
                        </foreach>
                    </processor-chain>
                    <processor-chain>
                        <dw:transform-message doc:name="Transform Message">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
flowVars.data.jpgs]]></dw:set-payload>
                        </dw:transform-message>
                        <foreach doc:name="request jpg moves">
                            <json:object-to-json-transformer doc:name="Object to JSON"/>
                            <amqp:outbound-endpoint exchangeName="${broker.exchanges.copy_file}" responseTimeout="1000" connector-ref="broker_connector" doc:name="broker.exchanges.copy_file"/>
                        </foreach>
                    </processor-chain>
                </scatter-gather>
            </when>
            <otherwise>
                <logger message="Directory is empty. Mark as empty in database and don't send any messages." level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <db:update config-ref="tracking-db" doc:name="Set status to 'queued-structure' or 'empty-directory'">
            <db:parameterized-query>
                <![CDATA[update ${database.tracktable}
set status = #[flowVars.data['altos'].size () + flowVars.data['tifs'].size () + flowVars.data['jp2s'].size () > 0 ? 'queued-structure' : 'empty-directory']
where pid = #[flowVars.pid];]]>
            </db:parameterized-query>
        </db:update>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        <exception-strategy ref="reject-handler" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="file-move-completed">
        <amqp:inbound-endpoint queueName="${broker.queues.movecomplete}" responseTimeout="10000" doc:name="file-move-completed" connector-ref="broker_connector" />
        <flow-ref name="setup-related-info" doc:name="setup-related-info"/>
        <transactional action="ALWAYS_BEGIN" doc:name="Transactional">
            <logger message="incrementing #[flowVars.pid] #[flowVars.data]" level="INFO" doc:name="Logger"/>
            <db:update config-ref="tracking-db" doc:name="increment move count">
                <db:parameterized-query><![CDATA[update ${database.tracktable}
set nr_of_moved = nr_of_moved + 1
where pid = #[flowVars.pid]]]></db:parameterized-query>
            </db:update>
            <db:select config-ref="tracking-db" doc:name="check completed">
                <db:parameterized-query>
                    <![CDATA[select nr_of_moves - nr_of_moved = 0 as completed from ${database.tracktable} where pid = #[flowVars.pid];]]>
                </db:parameterized-query>
            </db:select>
        </transactional>
        <choice doc:name="is pid structure complete?">
            <when expression="#[payload[0].completed]">
                <dw:transform-message doc:name="Transform Message" metadata:id="375b976c-675c-4603-9413-b5c0f3096c66">
                    <dw:input-variable doc:sample="sample_data/json_1.json" variableName="metadata"/>
                    <dw:set-payload>
                        <![CDATA[%dw 1.0
%output application/json
---
{
	'correlation_id': flowVars.pid,
	'pid': flowVars.pid,
	'directory': flowVars.request.directory ++ '/_complex',
	'metadata': flowVars.request.metadata,
	'agents': flowVars.request.agents,
	'fileUse': flowVars.request.fileUse,
	'excludes': [ '.complex', '.nfs']
}]]>
                    </dw:set-payload>
                </dw:transform-message>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <amqp:outbound-endpoint responseTimeout="10000" doc:name="request mets generation" exchangeName="${broker.exchanges.generate_mets}" connector-ref="broker_connector"/>
                <db:update config-ref="tracking-db" doc:name="Database">
                    <db:parameterized-query>
                        <![CDATA[update ${database.tracktable}
set status = 'requested-mets-generation'
where pid = #[flowVars.pid];]]>
                    </db:parameterized-query>
                </db:update>
            </when>
            <when expression="#[flowVars.data.destination_file != null &amp;&amp; flowVars.data.destination_file.endsWith ('.complex')]">
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload>
                        <![CDATA[%dw 1.0
%output application/json
---
{
	'destination_file': flowVars.pid ++ '.complex',
	'destination_host': p('ftpDestination.cegesoma.host'),
	'destination_password': p('ftpDestination.cegesoma.password'),
	'destination_path': p('ftpDestination.cegesoma.path'),
	'destination_user': p('ftpDestination.cegesoma.username'),
	'source_path': flowVars.request.directory ++ '/_complex',
	'source_file': flowVars.pid ++ '.complex',
	'source_host': p('ftpsource.cegesoma.host'),
	'source_user': p('ftpsource.cegesoma.username'),
	'source_password': p('ftpsource.cegesoma.password'),
	'move': false
}]]>
                    </dw:set-payload>
                </dw:transform-message>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                
                <amqp:outbound-endpoint responseTimeout="10000" doc:name="request hand off to mam system" exchangeName="${broker.exchanges.hand_off}" connector-ref="handoff_connector"/>
                <flow-ref name="while_amount_in_progress_free" doc:name="while_amount_in_progress_free"/>
                
                <db:update config-ref="tracking-db" doc:name="Database">
                    <db:parameterized-query>
                        <![CDATA[update ${database.tracktable}
set status = 'handing off'
where pid = #[flowVars.pid];]]>
                    </db:parameterized-query>
                </db:update>
            </when>
            <otherwise>
                <logger message="Not completed #[flowVars.pid]" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        <exception-strategy ref="reject-handler" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="mets-generated" initialState="started">
        <amqp:inbound-endpoint queueName="${broker.queues.metscomplete}" responseTimeout="10000" doc:name="mets-generated" connector-ref="broker_connector" />
        <flow-ref name="setup-related-info" doc:name="setup-related-info"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload>
                <![CDATA[%dw 1.0
%output application/json
---
{
	'correlation_id': flowVars.pid,
	'pid': flowVars.pid,
	'directory': flowVars.request.directory ++ '/_complex'
}]]>
            </dw:set-payload>
        </dw:transform-message>
        <amqp:outbound-endpoint exchangeName="${broker.exchanges.embed_alto}" responseTimeout="10000" doc:name="request embedding alto files" connector-ref="broker_connector"/>
        <db:update config-ref="tracking-db" doc:name="Set status to requested-alto-embeding">
            <db:parameterized-query>
                <![CDATA[update ${database.tracktable}
set status = 'requested-alto-embeding'
where pid = #[flowVars.pid];]]>
            </db:parameterized-query>
        </db:update>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        <exception-strategy ref="reject-handler" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="altos-embeded" initialState="started">
        <amqp:inbound-endpoint queueName="${broker.queues.altoscomplete}" responseTimeout="10000" doc:name="altos-embdede" connector-ref="broker_connector" />
        <flow-ref name="setup-related-info" doc:name="setup-related-info"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	'correlation_id': flowVars.pid,
	'pid': flowVars.pid,
	'source_server': '',
	'destination_server': '',
	'source_path': flowVars.request.directory ++ '/' ++ p('private_dir'),
	'destination_path': flowVars.request.directory ++ '/' ++ p('private_dir'),
	'destination_file': flowVars.pid ++ '.complex',
	'excludes': [ '.complex', '.nfs', flowVars.pid ++ '_inuits.zip']
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <amqp:outbound-endpoint exchangeName="${broker.exchanges.create_zip}" responseTimeout="10000" connector-ref="broker_connector" doc:name="request zipping into complex file" />
        <db:update config-ref="tracking-db" doc:name="Database">
            <db:parameterized-query>
                <![CDATA[update ${database.tracktable}
set status = 'requested-complex-generation'
where pid = #[flowVars.pid];]]>
            </db:parameterized-query>
        </db:update>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        <exception-strategy ref="reject-handler" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="while_amount_in_progress_free" processingStrategy="synchronous">
        <http:request config-ref="Sensor_API_Configuration" path="${sensor.path}" method="GET" doc:name="HTTP sensor">
            <http:request-builder>
                <http:query-param paramName="content" value="channels"/>
                <http:query-param paramName="output" value="xml"/>
                <http:query-param paramName="columns" value="name,lastvalue_"/>
                <http:query-param paramName="id" value="${sensor.id}"/>
                <http:query-param paramName="username" value="${sensor.username}"/>
                <http:query-param paramName="password" value="${sensor.password}"/>
            </http:request-builder>
        </http:request>
        <until-successful maxRetries="999999999" synchronous="true" doc:name="Until Successful">
            <flow-ref name="while_amount_in_progress_free_sub" doc:name="while_amount_in_progress_free_sub"/>
        </until-successful>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="No sensor found. Proceeding" level="WARN" doc:name="Logger"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="while_amount_in_progress_free_sub">
        <logger message="Checking amount in progress" level="INFO" doc:name="Logger"/>
        <http:request config-ref="Sensor_API_Configuration" path="${sensor.path}" method="GET" doc:name="HTTP sensor">
            <http:request-builder>
                <http:query-param paramName="output" value="xml"/>
                <http:query-param paramName="id" value="${sensor.id}"/>
                <http:query-param paramName="username" value="${sensor.username}"/>
                <http:query-param paramName="password" value="${sensor.password}"/>
                <http:query-param paramName="content" value="channels"/>
                <http:query-param paramName="columns" value="name,lastvalue_"/>
            </http:request-builder>
        </http:request>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="in_progress" value="#[java.lang.Integer.parseInt(xpath3(&quot;//channels/item[name='Value']/lastvalue/text()&quot;).split(' #')[0].replaceAll(' ',''))]" doc:name="Set in_progress"/>
        <logger message="#[&quot;Amount in progress: &quot; + flowVars.in_progress]" level="INFO" doc:name="Logger"/>
        <message-filter throwOnUnaccepted="true" doc:name="Message">
            <expression-filter expression="#[flowVars.in_progress &lt; '${sensor.maxinprogress}']"/>
        </message-filter>
    </sub-flow>
</mule>